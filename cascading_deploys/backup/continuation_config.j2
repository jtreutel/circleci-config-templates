version: 2.1


orbs: 
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  setup-aws-cli:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
          role-arn: "arn:aws:iam::660990364978:role/jennings-oidc-demo"
          role-session-name: example-session
      - run: aws sts get-caller-identity #example AWS command
      
  run-deployment:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - run: node --version #demonstrate node is installed
      - run: 
          command: |
            cat \<< EOF
            Deploying with the following params:
            
            App name: {{ APP_NAME }}
            Release: {{ RELEASE }}
            Build number: << pipeline.number >>
            Branch: << pipeline.git.branch >>
            Environment: {{ ENVIRONMENT }}
            Artifact S3 bucket: ${S3_BUCKET}
            EOF
  promote:
    docker:
      - image: cimg/base:2022.06
    steps:
      - run:
          name: Determine next environment and trigger pipeline
          command: |
            if [ {{ ENVIRONMENT }} == "dev" ]; then \
              export NEXT_ENV="staging"; \
            elif [ {{ ENVIRONMENT }} == "staging" ]; then \
              export NEXT_ENV="prod"; \
            fi

            export REQUEST_BODY=$(jq --null-input \
            --arg branch "<< pipeline.git.branch >>" \
            --arg environment "$NEXT_ENV" \
            --arg release "{{ RELEASE }}" \
            --arg app_name "{{ APP_NAME }}" \
            '{"branch":$branch,"parameters":{"environment":$environment,"release":$release,"app_name":$app_name}}')

            echo curl --request POST --url https://circleci.com/api/v2/project/gh/jtreutel/${CIRCLE_PROJECT_REPONAME}/pipeline --header "Circle-Token: $CIRCLE_TOKEN" --header "content-type: application/json" --data $REQUEST_BODY


            curl --request POST --url https://circleci.com/api/v2/project/gh/jtreutel/${CIRCLE_PROJECT_REPONAME}/pipeline --header "Circle-Token: $CIRCLE_TOKEN" --header "content-type: application/json" --data "$REQUEST_BODY"

workflows:
  deploy-and-promote:
    when:
        condition:
          or:
            - equal: [ dev, {{ ENVIRONMENT }} ]
            - equal: [ staging, {{ ENVIRONMENT }} ]
    jobs:
      - setup-aws-cli:
          context: empty-context
      - run-deployment:
          context: test-{{ ENVIRONMENT }}-vars
          requires:
            - setup-aws-cli
      #- manual-approval
      - promote:
          context: test-{{ ENVIRONMENT }}-vars
          requires:
            - run-deployment
  deploy-only:
    when:
        condition:
          or:
            - equal: [ prod, {{ ENVIRONMENT }} ]
            - equal: [ true, {{ NO_PROMOTIION }} ]
    jobs:
      - setup-aws-cli:
          context: empty-context
      - run-deployment:
          context: test-{{ ENVIRONMENT }}-vars
          requires:
            - setup-aws-cli
      #- manual-approval
      - promote:
          context: test-{{ ENVIRONMENT }}-vars
          requires:
            - run-deployment